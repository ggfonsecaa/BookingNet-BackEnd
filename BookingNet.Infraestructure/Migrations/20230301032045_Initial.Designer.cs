// <auto-generated />
using System;
using BookingNet.Infraestructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingNet.Infraestructure.Migrations
{
    [DbContext(typeof(BookingNetDbContext))]
    [Migration("20230301032045_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Attendants")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("BookingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16, 2)")
                        .HasDefaultValue(0m);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BookingsStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Creada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aceptada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 3,
                            Name = "Confirmada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pagada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 5,
                            Name = "Aprobada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 6,
                            Name = "Realizada",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 7,
                            Name = "Rechazada",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.BookingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BookingsTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matrimonio",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Primera comunión",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bautismo",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quince años",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 5,
                            Name = "Evento particular",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 6,
                            Name = "Evento institucional",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingFlowAggregate.BookingsFlows", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEndFlow")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStartFlow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 2, 28, 22, 20, 44, 957, DateTimeKind.Local).AddTicks(3554));

                    b.HasKey("BookingId", "FlowId", "Id");

                    b.HasIndex("FlowId");

                    b.ToTable("BookingsFlows", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingInventoryAggregate.BookingsInventories", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("BookingId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("BookingsInventories", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.FlowAggregate.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowId")
                        .HasColumnType("int");

                    b.Property<bool>("HasPreviousFlow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("FlowId")
                        .IsUnique()
                        .HasFilter("[FlowId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Flows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingStatusId = 1,
                            HasPreviousFlow = false,
                            Name = "Creación de reserva",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingStatusId = 2,
                            FlowId = 1,
                            HasPreviousFlow = true,
                            Name = "Validación de disponibilidad",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingStatusId = 3,
                            FlowId = 2,
                            HasPreviousFlow = true,
                            Name = "Validación de inventarios",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookingStatusId = 4,
                            FlowId = 3,
                            HasPreviousFlow = true,
                            Name = "Pago de reserva",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookingStatusId = 5,
                            FlowId = 4,
                            HasPreviousFlow = true,
                            Name = "Confirmación de evento",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            BookingStatusId = 6,
                            FlowId = 5,
                            HasPreviousFlow = true,
                            Name = "Realización del evento",
                            RowVersion = new byte[0],
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookingStatusId = 7,
                            HasPreviousFlow = false,
                            Name = "Rechazo del evento",
                            RowVersion = new byte[0],
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.GroupAggregate.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administradores del sistema",
                            RoleId = 1,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Usuarios del sistema",
                            RoleId = 2,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clientes",
                            RoleId = 3,
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.InventoryAggregate.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.InventoryAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.MenuAggregate.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("NotificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 2, 28, 22, 20, 44, 974, DateTimeKind.Local).AddTicks(4270));

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotificationsTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Modificación de reserva",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cambio de estado de reserva",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.NotificationWay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotificationsWays", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Correo electrónico",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mensaje de texto",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.ReportAggregate.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administradores",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 2,
                            Name = "Usuarios",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clientes",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleMenuAggregate.RolesMenus", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowVisualize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RolesMenus", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleReportAggregate.RolesReports", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("RolesReports", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NotificationWayId")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("NotificationWayId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NotificationWayId = 1,
                            PassWord = "",
                            RowVersion = new byte[0],
                            UserEmail = "admin@admin.com",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserGroupAggregate.UsersGroups", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UsersGroups", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserNotificationAggregate.UsersNotifications", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UsersNotifications", (string)null);
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.BookingAggregate.BookingType", "BookingType")
                        .WithMany()
                        .HasForeignKey("BookingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingFlowAggregate.BookingsFlows", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.BookingAggregate.Booking", "Booking")
                        .WithMany("Flows")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.FlowAggregate.Flow", "Flow")
                        .WithMany("Bookings")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingInventoryAggregate.BookingsInventories", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.BookingAggregate.Booking", "Booking")
                        .WithMany("Inventories")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.InventoryAggregate.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.FlowAggregate.Flow", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.BookingAggregate.BookingStatus", "BookingStatus")
                        .WithMany("Flows")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.FlowAggregate.Flow", "ParentFlow")
                        .WithOne()
                        .HasForeignKey("BookingNet.Domain.Aggregates.FlowAggregate.Flow", "FlowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookingNet.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Flows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("ParentFlow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.GroupAggregate.Group", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.RoleAggregate.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.InventoryAggregate.Inventory", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.InventoryAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.NotificationAggregate.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleMenuAggregate.RolesMenus", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.MenuAggregate.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.RoleAggregate.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleReportAggregate.RolesReports", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.ReportAggregate.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.RoleAggregate.Role", "Role")
                        .WithMany("Reports")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.NotificationAggregate.NotificationWay", "NotificationWay")
                        .WithMany("Users")
                        .HasForeignKey("NotificationWayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationWay");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserGroupAggregate.UsersGroups", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.GroupAggregate.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserNotificationAggregate.UsersNotifications", b =>
                {
                    b.HasOne("BookingNet.Domain.Aggregates.NotificationAggregate.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingNet.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.Navigation("Flows");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.BookingAggregate.BookingStatus", b =>
                {
                    b.Navigation("Flows");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.FlowAggregate.Flow", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.NotificationAggregate.NotificationWay", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BookingNet.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Navigation("Flows");

                    b.Navigation("Groups");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
